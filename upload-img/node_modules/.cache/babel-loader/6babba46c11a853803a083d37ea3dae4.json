{"ast":null,"code":"var _jsxFileName = \"/Users/bravesoft/Archive/graphql/upload-img/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'dotenv/config';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\nconst path = require('path');\n\nrequire('dotenv').config({\n  path: path.join(__dirname, '../.env')\n});\n\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {}\n\n  if (networkError) {}\n});\nconsole.log(JSON.stringify(process.env));\nconst httpLink = new HttpLink({\n  uri: process.env.API_LINK,\n  headers: {\n    authorization: \"Bearer \".concat(process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN)\n  }\n});\nconst link = ApolloLink.from([errorLink, httpLink]);\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link,\n  cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n})), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/bravesoft/Archive/graphql/upload-img/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","ApolloClient","HttpLink","InMemoryCache","ApolloProvider","onError","ApolloLink","path","require","config","join","__dirname","errorLink","graphQLErrors","networkError","console","log","JSON","stringify","process","env","httpLink","uri","API_LINK","headers","authorization","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","link","from","cache","client","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAO,eAAP;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;AAAEF,EAAAA,IAAI,EAAEA,IAAI,CAACG,IAAL,CAAUC,SAAV,EAAqB,SAArB;AAAR,CAAzB;;AAEA,MAAMC,SAAS,GAAGP,OAAO,CAAC,CAAC;AAAEQ,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC7D,MAAID,aAAJ,EAAmB,CAClB;;AACD,MAAIC,YAAJ,EAAkB,CACjB;AACF,CALwB,CAAzB;AAMAC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeC,OAAO,CAACC,GAAvB,CAAZ;AACA,MAAMC,QAAQ,GAAG,IAAInB,QAAJ,CAAa;AAC5BoB,EAAAA,GAAG,EAAEH,OAAO,CAACC,GAAR,CAAYG,QADW;AAE5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,mBAAaN,OAAO,CAACC,GAAR,CAAYM,sCAAzB;AADN;AAFmB,CAAb,CAAjB;AAOA,MAAMC,IAAI,GAAGrB,UAAU,CAACsB,IAAX,CAAgB,CAAChB,SAAD,EAAYS,QAAZ,CAAhB,CAAb;AACA,MAAMQ,KAAK,GAAG,IAAI1B,aAAJ,EAAd;AAEA,MAAM2B,MAAM,GAAG,IAAI7B,YAAJ,CAAiB;AAC9B0B,EAAAA,IAD8B;AAE9BE,EAAAA;AAF8B,CAAjB,CAAf;AAKA/B,QAAQ,CAACiC,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIAE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJA;AAMAjC,aAAa,CAACkC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'dotenv/config';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nconst path = require('path');\nrequire('dotenv').config({ path: path.join(__dirname, '../.env') });\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n  }\n  if (networkError) {\n  }\n});\nconsole.log(JSON.stringify(process.env))\nconst httpLink = new HttpLink({\n  uri: process.env.API_LINK,\n  headers: {\n    authorization: `Bearer ${ process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN }`\n  }\n});\n\nconst link = ApolloLink.from([errorLink, httpLink]);\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}