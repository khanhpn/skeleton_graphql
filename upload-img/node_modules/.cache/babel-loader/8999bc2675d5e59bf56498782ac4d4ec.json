{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');\n\nvar _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));\n\nvar _require = require('apollo-link'),\n    ApolloLink = _require.ApolloLink,\n    Observable = _require.Observable;\n\nvar _require2 = require('apollo-link-http-common'),\n    selectURI = _require2.selectURI,\n    selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n    fallbackHttpConfig = _require2.fallbackHttpConfig,\n    serializeFetchParameter = _require2.serializeFetchParameter,\n    createSignalIfSupported = _require2.createSignalIfSupported,\n    parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse;\n\nvar _require3 = require('extract-files'),\n    extractFiles = _require3.extractFiles,\n    ReactNativeFile = _require3.ReactNativeFile;\n\nexports.ReactNativeFile = ReactNativeFile;\n\nexports.createUploadLink = function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$uri = _ref.uri,\n      fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n      _ref$fetch = _ref.fetch,\n      linkFetch = _ref$fetch === void 0 ? fetch : _ref$fetch,\n      fetchOptions = _ref.fetchOptions,\n      credentials = _ref.credentials,\n      headers = _ref.headers,\n      includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  };\n  return new ApolloLink(function (operation) {\n    var uri = selectURI(operation, fetchUri);\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren = _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n        version = _context$clientAwaren.version,\n        headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: (0, _extends2.default)({}, name && {\n        'apollographql-client-name': name\n      }, {}, version && {\n        'apollographql-client-version': version\n      }, {}, headers)\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _selectHttpOptionsAnd.options,\n        body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body),\n        clone = _extractFiles.clone,\n        files = _extractFiles.files;\n\n    var payload = serializeFetchParameter(clone, 'Payload');\n\n    if (files.size) {\n      delete options.headers['content-type'];\n      var form = new FormData();\n      form.append('operations', payload);\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        form.append(++i, file, file.name);\n      });\n      options.body = form;\n    } else options.body = payload;\n\n    return new Observable(function (observer) {\n      var _createSignalIfSuppor = createSignalIfSupported(),\n          controller = _createSignalIfSuppor.controller,\n          signal = _createSignalIfSuppor.signal;\n\n      if (controller) options.signal = signal;\n      linkFetch(uri, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n      }).catch(function (error) {\n        if (error.name === 'AbortError') return;\n        if (error.result && error.result.errors && error.result.data) observer.next(error.result);\n        observer.error(error);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}